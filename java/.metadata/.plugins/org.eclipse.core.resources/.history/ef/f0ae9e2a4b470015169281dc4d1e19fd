package com.github.yinhangfeng.androiddocs;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.io.FileUtils;

public class AndroidDocs {
	
	private static final Charset UTF8 = Charset.forName("UTF-8");
	private static ThreadPoolExecutor executor = new ThreadPoolExecutor(5, 5, 0, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());
	private static final Pattern REPLACE_PATTERN
		= Pattern.compile("<script.+?src=\"(http.+?)\".+?>\\s*</script>|<script>\\s*?\\(function\\(i,s,o,g,r,a,m\\)[\\s\\S]+?</script>");
	private static ThreadLocal<StringBuffer> stringBufferLocal = new ThreadLocal<StringBuffer>() {
		@Override
		protected StringBuffer initialValue() {
			return new StringBuffer(4096);
		}
	};
	private static ConcurrentHashMap<String, Boolean> urlMap = new ConcurrentHashMap<String, Boolean>();
	private static AtomicInteger taskCounter = new AtomicInteger(0);
	
	public static void main(String[] args) throws Exception {
		long start = System.currentTimeMillis();
		File docsDir = new File("D:\\Android\\android-sdk\\docs_copy");
		probe(docsDir);
		while(taskCounter.get() > 0) {
			Thread.sleep(30);
		}
		log("urlMap:" + urlMap.toString());
		log("end time=" + (System.currentTimeMillis() - start) + "MS");
	}
	
	private static void probe(File file) {
		if(file.isDirectory()) {
			File[] children = file.listFiles();
			if(children != null) {
				for(File child : children) {
					probe(child);
				}
			}
		} else if(file.getPath().endsWith(".html")) {
			dispatchTask(file);
		}
	}
	
	private static void dispatchTask(final File htmlFile) {
		taskCounter.incrementAndGet();
		executor.execute(new Runnable() {

			@Override
			public void run() {
				try {
					handleHtmlFile(htmlFile);
				} finally {
					taskCounter.decrementAndGet();
				}
			}
			
		});
	}
	
	private static void handleHtmlFile(File htmlFile) {
		String fileStr;
		try {
			fileStr = FileUtils.readFileToString(htmlFile, UTF8);
		} catch (IOException e) {
			e.printStackTrace();
			return;
		}
		StringBuffer sb = stringBufferLocal.get();
		sb.setLength(0);
		Matcher matcher = REPLACE_PATTERN.matcher(fileStr);
		String url;
		while(matcher.find()) {
			url = matcher.group(1);
			if(url != null) {
				urlMap.put(url, Boolean.TRUE);
			}
			matcher.appendReplacement(sb, "<!-- $0 -->");
		}
		matcher.appendTail(sb);
		
	}
	
	private static void log(Object obj) {
		System.out.println(obj);
	}

}
